generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ColorSchemeEnum {
  BLACK_AND_WHITE
  COLOR
}

enum ConsultationStatusEnum {
  OPEN
  CLOSED
}

enum RequestStatusEnum {
  UNREAD
  READ
  ACCEPTED
  REJECTED
}

model Consultation {
  id        Int                    @id @default(autoincrement())
  date      DateTime
  status    ConsultationStatusEnum @default(OPEN)
  requestId Int                    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id        Int    @id @default(autoincrement())
  text      String
  userId    Int
  requestId Int    @unique

  request Request @relation(fields: [requestId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int    @unique

  employees OrgsAndUsers[]
  requests  Request[]

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Request {
  id                Int               @id @default(autoincrement())
  fullName          String
  email             String
  phoneNumber       Int
  pronouns          String?
  size              String
  placement         String
  colorScheme       ColorSchemeEnum
  description       String
  status            RequestStatusEnum
  appointmentAmount Int?

  consultationId Int? @unique
  organizationId Int? @unique
  userId         Int? @unique

  notes Note[]

  user         User?         @relation(fields: [userId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  salt     String

  notes         Note[]
  organizations OrgsAndUsers[]
  requests      Request[]

  organization Organization?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgsAndUsers {
  userId         Int
  organizationId Int

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@id([userId, organizationId])
}
